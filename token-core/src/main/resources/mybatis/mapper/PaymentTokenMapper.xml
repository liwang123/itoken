<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.thingtrust.token.data.PaymentTokenRepository">
											  <!-- CodeBuilder  Generated-->
  <resultMap id="PaymentTokenMap" type="com.thingtrust.token.domain.PaymentToken">
  					 <id column="id" property="id" jdbcType="BIGINT" />
							<result column="token_id" property="tokenId" jdbcType="BIGINT" />
							<result column="symbol" property="symbol" jdbcType="VARCHAR" />
							<result column="asset_name" property="assetName" jdbcType="VARCHAR" />
							<result column="asset_id" property="assetId" jdbcType="VARCHAR" />
							<result column="issuser_name" property="issuserName" jdbcType="VARCHAR" />
							<result column="email_id" property="emailId" jdbcType="BIGINT" />
							<result column="address" property="address" jdbcType="VARCHAR" />
							<result column="descript" property="descript" jdbcType="VARCHAR" />
							<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
			  </resultMap>
  <sql id="Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
  <sql id="Table_Name">payment_token</sql>
	<sql id="Base_Column_List_Without_Id">
  	  									token_id ,								symbol ,								asset_name ,								asset_id ,								issuser_name ,								email_id ,								address ,								descript ,								create_time 			  </sql>
  <sql id="Base_Column_List">
  	  					id ,
			  			  			  			  			  			  			  			  			  				<include refid="Base_Column_List_Without_Id"/>
  </sql>
    <sql id="Insert_Columns">
     							<if test="record.tokenId != null">token_id,</if>
							<if test="record.symbol != null">symbol,</if>
							<if test="record.assetName != null">asset_name,</if>
							<if test="record.assetId != null">asset_id,</if>
							<if test="record.issuserName != null">issuser_name,</if>
							<if test="record.emailId != null">email_id,</if>
							<if test="record.address != null">address,</if>
							<if test="record.descript != null">descript,</if>
							<if test="record.createTime != null">create_time,</if>
			    </sql>
    <sql id="Insert_Values">
    							<if test="record.tokenId != null">#{record.tokenId,jdbcType=BIGINT},</if>
							<if test="record.symbol != null">#{record.symbol,jdbcType=VARCHAR},</if>
							<if test="record.assetName != null">#{record.assetName,jdbcType=VARCHAR},</if>
							<if test="record.assetId != null">#{record.assetId,jdbcType=VARCHAR},</if>
							<if test="record.issuserName != null">#{record.issuserName,jdbcType=VARCHAR},</if>
							<if test="record.emailId != null">#{record.emailId,jdbcType=BIGINT},</if>
							<if test="record.address != null">#{record.address,jdbcType=VARCHAR},</if>
							<if test="record.descript != null">#{record.descript,jdbcType=VARCHAR},</if>
							<if test="record.createTime != null">#{record.createTime,jdbcType=TIMESTAMP},</if>
			    </sql>
    <sql id="Batch_Insert_Values">
								 #{record.tokenId,jdbcType=BIGINT},
		 					 #{record.symbol,jdbcType=VARCHAR},
		 					 #{record.assetName,jdbcType=VARCHAR},
		 					 #{record.assetId,jdbcType=VARCHAR},
		 					 #{record.issuserName,jdbcType=VARCHAR},
		 					 #{record.emailId,jdbcType=BIGINT},
		 					 #{record.address,jdbcType=VARCHAR},
		 					 #{record.descript,jdbcType=VARCHAR},
		 					 #{record.createTime,jdbcType=TIMESTAMP},
		 	    </sql>
	<sql id="Batch_Insert_Values_On_DuplicateKey">
									#{record.id,jdbcType=BIGINT},
																																																				<include refid="Batch_Insert_Values"/>
	</sql>
    <sql id="Update_Set_From_Bean">
	 							<if test="record.tokenId != null">token_id = #{record.tokenId,jdbcType=BIGINT} ,</if>
							<if test="record.symbol != null">symbol = #{record.symbol,jdbcType=VARCHAR} ,</if>
							<if test="record.assetName != null">asset_name = #{record.assetName,jdbcType=VARCHAR} ,</if>
							<if test="record.assetId != null">asset_id = #{record.assetId,jdbcType=VARCHAR} ,</if>
							<if test="record.issuserName != null">issuser_name = #{record.issuserName,jdbcType=VARCHAR} ,</if>
							<if test="record.emailId != null">email_id = #{record.emailId,jdbcType=BIGINT} ,</if>
							<if test="record.address != null">address = #{record.address,jdbcType=VARCHAR} ,</if>
							<if test="record.descript != null">descript = #{record.descript,jdbcType=VARCHAR} ,</if>
							<if test="record.createTime != null">create_time = #{record.createTime,jdbcType=TIMESTAMP} ,</if>
			    </sql>
	<!-- insert -->
	<insert id="insert" parameterType="java.util.Map">
				<selectKey resultType="java.lang.Long" keyProperty="record.id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
		        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Insert_Columns"/>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <include refid="Insert_Values"/>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.Map">
        insert into <include refid="Table_Name"/>
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <include refid="Base_Column_List_Without_Id"/>
        </trim>
        values
        <foreach collection="records" item="record" index="index" separator=",">
            <trim prefix="(" suffix=")" suffixOverrides=",">
                <include refid="Batch_Insert_Values"/>
            </trim>
        </foreach>
    </insert>
	<insert id="batchInsertOnDuplicateKey" parameterType="java.util.Map">
		insert into <include refid="Table_Name"/>
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<include refid="Base_Column_List"/>
		</trim>
		values
		<foreach collection="records" item="record" index="index" separator=",">
			<trim prefix="(" suffix=")" suffixOverrides=",">
				<include refid="Batch_Insert_Values_On_DuplicateKey"/>
			</trim>
		</foreach>
		ON DUPLICATE KEY UPDATE 
																token_id = VALUES(token_id)  ,												symbol = VALUES(symbol)  ,												asset_name = VALUES(asset_name)  ,												asset_id = VALUES(asset_id)  ,												issuser_name = VALUES(issuser_name)  ,												email_id = VALUES(email_id)  ,												address = VALUES(address)  ,												descript = VALUES(descript)  ,												create_time = VALUES(create_time)  						</insert>
	<!-- end insert -->
    <!-- delete -->
    <delete id="deleteById" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <delete id="deleteIn" parameterType="java.util.Map">
        delete from <include refid="Table_Name"/> where id in
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.id,jdbcType=BIGINT}
		</foreach>
    </delete>
    <!-- end delete -->
    <!-- update -->
	<update id="updateById" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
		where id = #{record.id,jdbcType=BIGINT}
	</update>
    <update id="updateByExample" parameterType="java.util.Map">
        update <include refid="Table_Name"/>
        <set>
            <include refid="Update_Set_From_Bean"/>
        </set>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="batchUpdate" parameterType="java.util.Map">
        <foreach collection="records" item="record" index="index" open="" close="" separator=";">
            update <include refid="Table_Name"/>
            <set>
            	<include refid="Update_Set_From_Bean"/>
            </set>
			where id=#{record.id,jdbcType=BIGINT}
		</foreach>
    </update>
	 <!-- end update -->
    <!-- select -->
    <select id="selectById" resultMap="PaymentTokenMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectByExample" resultMap="PaymentTokenMap" parameterType="java.util.Map">
      select
      <if test="example != null and example.distinct">
        distinct
      </if>
      <include refid="Base_Column_List"/>
      from <include refid="Table_Name"/>
      <if test="example != null">
        <include refid="Example_Where_Clause"/>
      </if>
      <if test="example != null and example.orderByClause != null">
        order by ${example.orderByClause}
      </if>
    </select>
    <select id="selectOneByExample" resultMap="PaymentTokenMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        limit 1
    </select>
    <select id="selectIn" resultMap="PaymentTokenMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        where id IN
        <foreach collection="records" item="record" index="index" open="(" separator="," close=")">
			#{record.id,jdbcType=BIGINT}
		</foreach>
    </select>
    <select id="countByExample" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
       <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByPager" resultType="java.lang.Integer" parameterType="java.util.Map">
        select count(*) as total from <include refid="Table_Name"/>
		<if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByPager" resultMap="PaymentTokenMap" parameterType="java.util.Map">
        select
        <include refid="Base_Column_List"/>
        from <include refid="Table_Name"/>
        <if test="example != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="pager.sortItem != null and pager.sortItem != '' ">
            order by ${pager.sortItem} ${pager.sortType}
        </if>
        limit #{pager.startIndex} , #{pager.pageSize}
    </select>

    <select id="selectPaymenTokenIssuserList" resultType="com.thingtrust.token.entity.PaymentTokenIssuserEntity">
        SELECT
            a.id ,
            a.asset_name assetName,
            a.symbol ,
            a.asset_id assetId,
            a.issuser_name issuserName,
            b.cap ,
            a.descript ,
            a.create_time createTime
        FROM
            payment_token a
        LEFT JOIN token b ON a.token_id = b.id


    </select>
    <!-- end select -->
    <!-- My Custom Interfaces -->
</mapper>
